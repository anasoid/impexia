/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.0/userguide/tutorial_java_projects.html
 */


// 3rd party plugin repositories can be configured in settings.gradle
plugins {
	id "org.sonarqube" version "2.5"

}
 
// Apply the java plugin to add support for Java



allprojects {
    apply plugin: 'java'
    apply plugin: 'maven'
	
	apply plugin: "jacoco"
	
	
	group = 'org.anasoid.impexia'
	sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
   
   
    
	
   repositories {
        jcenter()
		mavenCentral()
    }
	
	jacoco {
        toolVersion = '0.8.2'
    }

	

	
	ext.gradleScriptDir = "${rootProject.projectDir}/gradle"
	apply from: "${gradleScriptDir}/ide.gradle"
}



subprojects {
    
   apply plugin: 'checkstyle'
   apply plugin: 'pmd'
   
   
     checkstyle {

        configFile = rootProject.file('config/checkstyle/google_checks.xml')
        toolVersion "8.7"
        ignoreFailures =false
        maxErrors = 0
        maxWarnings = 0

     }
     pmd {
            consoleOutput = true

        }

    jacocoTestReport {

        reports {
            html.enabled = true
            xml.enabled = true
            csv.enabled = false
        }
	onlyIf = {
        true
    }
    doFirst {
        executionData = files(executionData.findAll {
            it.exists()
        })
    }
    
    test {
	    useJUnitPlatform()
	     testLogging {
		events "passed", "skipped", "failed"
	     }
	    // listen to events in the test execution lifecycle
       beforeTest { descriptor ->
            logger.lifecycle("Running test: " + descriptor)
       }
   }
    dependencies {

    testCompile("org.junit.jupiter:junit-jupiter-api:$junitVersion")
	testCompile("org.junit.jupiter:junit-jupiter-params:$junitVersion")
    testRuntime("org.junit.jupiter:junit-jupiter-engine:$junitVersion")
   }
}

check.dependsOn jacocoTestReport




}



ext {
	linkHomepage = 'https://github.com/anasoid/impexia'
	linkIssue = 'https://github.com/anasoid/impexia/issues'
	linkScmUrl = 'https://github.com/anasoid/impexia'



}

task jacocoRootReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
    dependsOn = subprojects.test
    additionalSourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories =  files(subprojects.sourceSets.main.output)
    executionData = files(subprojects.jacocoTestReport.executionData)
    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
    }
}


// In this section you declare the dependencies for your production and test code
project.dependencies {


  
    testImplementation("junit:junit:$junitVersion")
}


