package org.anasoid.impexia.core.validators.header;

import java.util.ArrayList;
import org.anasoid.impexia.core.meta.header.DefaultImpexAttribute;
import org.anasoid.impexia.core.meta.header.DefaultImpexHeader;
import org.anasoid.impexia.core.meta.header.DefaultImpexModifier;
import org.anasoid.impexia.core.validators.header.impl.RawHeaderValidator;
import org.anasoid.impexia.meta.Mode;
import org.anasoid.impexia.meta.exceptions.header.ActionException;
import org.anasoid.impexia.meta.exceptions.header.AttributeModifierException;
import org.anasoid.impexia.meta.exceptions.header.ImpexHeaderException;
import org.anasoid.impexia.meta.header.ImpexAction;
import org.anasoid.impexia.meta.modifier.ModifierEnum;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */

class HeaderValidatorManagerTest {

  private static HeaderValidatorManager headerValidator;
  private static final String INVALID_MODIFIER_MESSAGE =
      "custom attribute accepted only when Class modifier is used";

  private static final String INVALID_MODIFIER_MODE_MESSAGE = "is not acceptable by Mode";
  private static final String INVALID_MODIFIER_LEVEL_MESSAGE = "is not acceptable by Level";
  private static final String INVALID_MODIFIER_BOOLEAN_MESSAGE = "should be boolean";

  @BeforeAll
  static void init() {
    headerValidator = new HeaderValidatorManager();
  }

  @Test
  void failInvalidModifierHeader() throws ImpexHeaderException {
    DefaultImpexHeader impexHeader = new DefaultImpexHeader("product", ImpexAction.INSERT);
    impexHeader
        .addModifier(new DefaultImpexModifier("uniq", "tr"))
        .addAttribute(
            new DefaultImpexAttribute("code", new ArrayList<>())
                .addModifier(new DefaultImpexModifier("unique", "true")));

    try {
      headerValidator.validate(impexHeader, Mode.IMPORT);
      Assertions.fail("Import not valid modifier accepted");
    } catch (AttributeModifierException e) {
      Assertions.assertTrue(e.getMessage().contains(INVALID_MODIFIER_MESSAGE), e.getMessage());
    }
    try {
      headerValidator.validate(impexHeader, Mode.EXPORT);
      Assertions.fail("Import not valid modifier accepted");
    } catch (AttributeModifierException e) {
      Assertions.assertTrue(e.getMessage().contains(INVALID_MODIFIER_MESSAGE), e.getMessage());
    }
  }

  @Test
  void failInvalidModifierAttribute() throws ImpexHeaderException {
    DefaultImpexHeader impexHeader = new DefaultImpexHeader("product", ImpexAction.INSERT);
    impexHeader
        .addAttribute(
            new DefaultImpexAttribute("code", new ArrayList<>())
                .addModifier(new DefaultImpexModifier("unique", "true")))
        .addModifier(new DefaultImpexModifier("uniq", "tr"));

    try {
      headerValidator.validate(impexHeader, Mode.IMPORT);
      Assertions.fail("Import not valid modifier accepted");
    } catch (AttributeModifierException e) {
      Assertions.assertTrue(e.getMessage().contains(INVALID_MODIFIER_MESSAGE), e.getMessage());
    }
    try {
      headerValidator.validate(impexHeader, Mode.EXPORT);
      Assertions.fail("Import not valid modifier accepted");
    } catch (AttributeModifierException e) {
      Assertions.assertTrue(e.getMessage().contains(INVALID_MODIFIER_MESSAGE), e.getMessage());
    }
  }

  @Test
  void failInvalidModifierAttributeMulti() throws ImpexHeaderException {
    DefaultImpexHeader impexHeader = new DefaultImpexHeader("product", ImpexAction.INSERT);
    impexHeader.addAttribute(
        new DefaultImpexAttribute("code", new ArrayList<>())
            .addModifier(new DefaultImpexModifier("uniq", "tr"))
            .addModifier(new DefaultImpexModifier(ModifierEnum.UNIQUE.toString(), "true")));

    try {
      headerValidator.validate(impexHeader, Mode.IMPORT);
      Assertions.fail("Import not valid modifier accepted");
    } catch (AttributeModifierException e) {
      Assertions.assertTrue(e.getMessage().contains(INVALID_MODIFIER_MESSAGE), e.getMessage());
    }
    try {
      headerValidator.validate(impexHeader, Mode.EXPORT);
      Assertions.fail("Import not valid modifier accepted");
    } catch (AttributeModifierException e) {
      Assertions.assertTrue(e.getMessage().contains(INVALID_MODIFIER_MESSAGE), e.getMessage());
    }
  }

  @Test
  void validCustomModifierAttribute() throws ImpexHeaderException {
    DefaultImpexHeader impexHeader = new DefaultImpexHeader("product", ImpexAction.INSERT);
    impexHeader.addAttribute(
        new DefaultImpexAttribute("code", new ArrayList<>())
            .addModifier(new DefaultImpexModifier("uniq", "tr"))
            .addModifier(new DefaultImpexModifier("unique", "true"))
            .addModifier(new DefaultImpexModifier(ModifierEnum.TRANSLATOR.toString(), "tr")));

    headerValidator.validate(impexHeader, Mode.IMPORT);
  }

  @Test
  void validCustomModifierHeader() throws ImpexHeaderException {
    DefaultImpexHeader impexHeader =
        new DefaultImpexHeader("product", ImpexAction.INSERT)
            .addModifier(new DefaultImpexModifier(ModifierEnum.ERRORHANDLER.toString(), "tr"))
            .addModifier(new DefaultImpexModifier("uniq", "tr"))
            .addAttribute(
                new DefaultImpexAttribute("code", new ArrayList<>())
                    .addModifier(new DefaultImpexModifier("unique", "true")));

    headerValidator.validate(impexHeader, Mode.IMPORT);
  }

  @Test
  void validateModifierLevelAttribute() throws ImpexHeaderException {
    DefaultImpexHeader impexHeader = new DefaultImpexHeader("product", ImpexAction.INSERT);
    impexHeader.addAttribute(
        new DefaultImpexAttribute("code", new ArrayList<>())
            .addModifier(new DefaultImpexModifier("unique", "true"))
            .addModifier(new DefaultImpexModifier("pathDelimiter", ":")));

    headerValidator.validate(impexHeader, Mode.IMPORT);
  }

  @Test
  void validateModifierBoolean() throws ImpexHeaderException {
    DefaultImpexHeader impexHeader = new DefaultImpexHeader("product", ImpexAction.INSERT);
    impexHeader.addAttribute(
        new DefaultImpexAttribute("code", new ArrayList<>())
            .addModifier(new DefaultImpexModifier(ModifierEnum.UNIQUE.toString(), "true")));

    headerValidator.validate(impexHeader, Mode.IMPORT);

    impexHeader = new DefaultImpexHeader("product", ImpexAction.INSERT);
    impexHeader.addAttribute(
        new DefaultImpexAttribute("code", new ArrayList<>())
            .addModifier(new DefaultImpexModifier(ModifierEnum.UNIQUE.toString(), "true")));

    headerValidator.validate(impexHeader, Mode.IMPORT);
  }

  @Test
  void validateModifierBooleanFail() throws ImpexHeaderException {
    DefaultImpexHeader impexHeader = new DefaultImpexHeader("product", ImpexAction.INSERT);
    impexHeader.addAttribute(
        new DefaultImpexAttribute("code", new ArrayList<>())
            .addModifier(new DefaultImpexModifier(ModifierEnum.UNIQUE.toString(), "tr")));

    try {
      headerValidator.validate(impexHeader, Mode.IMPORT);
      Assertions.fail("boolean check fail");
    } catch (AttributeModifierException e) {
      Assertions.assertTrue(
          e.getMessage().contains(INVALID_MODIFIER_BOOLEAN_MESSAGE), e.getMessage());
    }
  }

  @Test
  void validateModifierMode() throws ImpexHeaderException {
    DefaultImpexHeader impexHeader = new DefaultImpexHeader("product", ImpexAction.INSERT);
    impexHeader.addAttribute(
        new DefaultImpexAttribute("code", new ArrayList<>())
            .addModifier(new DefaultImpexModifier(ModifierEnum.MANDATORY.toString(), "true")));

    try {
      headerValidator.validate(impexHeader, Mode.EXPORT);
      Assertions.fail("Unique not valid for export");
    } catch (AttributeModifierException e) {
      Assertions.assertTrue(e.getMessage().contains(INVALID_MODIFIER_MODE_MESSAGE), e.getMessage());
    }
  }

  @Test
  void validateModifierLevel() throws ImpexHeaderException {
    DefaultImpexHeader impexHeader =
        new DefaultImpexHeader("product", ImpexAction.INSERT)
            .addModifier(new DefaultImpexModifier(ModifierEnum.UNIQUE.toString(), "true"))
            .addAttribute(new DefaultImpexAttribute("code", new ArrayList<>()));

    try {
      headerValidator.validate(impexHeader, Mode.IMPORT);
      Assertions.fail("Unique not valid for header");
    } catch (AttributeModifierException e) {
      Assertions.assertTrue(
          e.getMessage().contains(INVALID_MODIFIER_LEVEL_MESSAGE), e.getMessage());
    }
  }

  @Test
  void validateModifierAction() throws ImpexHeaderException {
    DefaultImpexHeader impexHeader =
        new DefaultImpexHeader("product", null)
            .addAttribute(
                new DefaultImpexAttribute("code", new ArrayList<>())
                    .addModifier(new DefaultImpexModifier(ModifierEnum.UNIQUE.toString(), "true")));

    try {
      headerValidator.validate(impexHeader, Mode.IMPORT);
      Assertions.fail("Action can't be null");
    } catch (ActionException e) {
      // nothing
    }
  }
}
