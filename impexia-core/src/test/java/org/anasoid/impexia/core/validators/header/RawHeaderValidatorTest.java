package org.anasoid.impexia.core.validators.header;

import org.anasoid.impexia.core.meta.header.DefaultImpexAttribute;
import org.anasoid.impexia.core.meta.header.DefaultImpexHeader;
import org.anasoid.impexia.core.meta.header.DefaultImpexModifier;
import org.anasoid.impexia.meta.Mode;
import org.anasoid.impexia.meta.exceptions.header.AttributeModifierException;
import org.anasoid.impexia.meta.exceptions.header.ImpexHeaderException;
import org.anasoid.impexia.meta.header.ImpexAction;
import org.anasoid.impexia.meta.modifier.Modifier;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */

class RawHeaderValidatorTest {

  private static HeaderValidator headerValidator;
  private static String INVALID_MODIFIER_MESSAGE =
      "custom attribute accepted only when Class modifier is used";

  @BeforeAll
  static void init() {
    headerValidator = new RawHeaderValidator();
  }

  @Test
  void failInvalidModifierHeader() throws ImpexHeaderException {
    DefaultImpexHeader impexHeader = new DefaultImpexHeader("product", ImpexAction.INSERT);
    impexHeader
        .addModifier(new DefaultImpexModifier("uniq", "tr"))
        .addAttribute(new DefaultImpexAttribute("code"));

    try {
      headerValidator.validate(impexHeader, Mode.IMPORT);
      Assertions.fail("Import not valid modifier accepted");
    } catch (AttributeModifierException e) {
      Assertions.assertTrue(e.getMessage().contains(INVALID_MODIFIER_MESSAGE));
    }
    try {
      headerValidator.validate(impexHeader, Mode.EXPORT);
      Assertions.fail("Import not valid modifier accepted");
    } catch (AttributeModifierException e) {
      Assertions.assertTrue(e.getMessage().contains(INVALID_MODIFIER_MESSAGE));
    }
  }

  @Test
  void failInvalidModifierAttribute() throws ImpexHeaderException {
    DefaultImpexHeader impexHeader = new DefaultImpexHeader("product", ImpexAction.INSERT);
    impexHeader.addAttribute(
        new DefaultImpexAttribute("code").addModifier(new DefaultImpexModifier("uniq", "tr")));

    try {
      headerValidator.validate(impexHeader, Mode.IMPORT);
      Assertions.fail("Import not valid modifier accepted");
    } catch (AttributeModifierException e) {
      Assertions.assertTrue(e.getMessage().contains(INVALID_MODIFIER_MESSAGE));
    }
    try {
      headerValidator.validate(impexHeader, Mode.EXPORT);
      Assertions.fail("Import not valid modifier accepted");
    } catch (AttributeModifierException e) {
      Assertions.assertTrue(e.getMessage().contains(INVALID_MODIFIER_MESSAGE));
    }
  }

  @Test
  void validateModifierLevelAttribute() throws ImpexHeaderException {
    DefaultImpexHeader impexHeader = new DefaultImpexHeader("product", ImpexAction.INSERT);
    impexHeader.addAttribute(
        new DefaultImpexAttribute("code")
            .addModifier(new DefaultImpexModifier("path-delimiter", ":")));

    headerValidator.validate(impexHeader, Mode.IMPORT);
  }

  @Test
  void validateModifierBoolean() throws ImpexHeaderException {
    DefaultImpexHeader impexHeader = new DefaultImpexHeader("product", ImpexAction.INSERT);
    impexHeader.addAttribute(
        new DefaultImpexAttribute("code")
            .addModifier(new DefaultImpexModifier(Modifier.UNIQUE.getCode(), "true")));

    headerValidator.validate(impexHeader, Mode.IMPORT);

    impexHeader = new DefaultImpexHeader("product", ImpexAction.INSERT);
    impexHeader.addAttribute(
        new DefaultImpexAttribute("code")
            .addModifier(new DefaultImpexModifier(Modifier.UNIQUE.getCode(), "true")));

    headerValidator.validate(impexHeader, Mode.IMPORT);
  }
}
